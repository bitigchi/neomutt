From 99ba609f09582469360f3a5fd7132ee556cbaeaf Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Wed, 13 May 2020 15:52:30 -0700
Subject: Loosen message-id parser to parse ids without angle brackets

To do this, we need to enhance the loop to skip over comments.  It
does this using the rfc822 address parse_comment() routine.

Keep parsing inside angle brackets non-strict, because of the history
of trac tickets (1116, 1935, 3090) demonstrating message-ids with
spaces inside the angle brackets, double-'@'s, or even completely
missing '@'.

However, in order to reduce the risk of extracting garbage, insist
that message-id's outside of angle brackets at least have an '@'.

Automatically add missing angle brackets so that Mutt will generate
valid references/in-reply-to headers.

Upstream-commit: https://gitlab.com/muttmua/mutt/commit/99ba609f09582469360f3a5fd7132ee556cbaeaf

Co-authored-by: Kevin McCarthy <kevin@8t8.us>
---
 parse.c  | 100 +++++++++++++++++++++++++++++++++----------------------
 rfc822.c |   8 ++---
 rfc822.h |   3 ++
 3 files changed, 67 insertions(+), 44 deletions(-)

diff --git a/parse.c b/parse.c
index 063d8ee1..e0b0c800 100644
--- a/parse.c
+++ b/parse.c
@@ -1015,59 +1015,79 @@ time_t mutt_parse_date (const char *s, HEADER *h)
  */
 char *mutt_extract_message_id (const char *s, const char **saveptr)
 {
-  const char *o, *onull, *p;
-  char *ret = NULL;
-
-  if (s)
-    p = s;
-  else if (saveptr)
-    p = *saveptr;
-  else
+  BUFFER *message_id = NULL;
+  char *retval;
+  int in_brackets = 0, has_atsign = 0;
+  size_t tmp;
+
+  if (!s && saveptr)
+    s = *saveptr;
+  if (!s || !*s)
     return NULL;
 
-  for (s = NULL, o = NULL, onull = NULL;
-       (p = strpbrk (p, "<> \t;")) != NULL; ++p)
+  message_id = mutt_buffer_pool_get ();
+
+  while (s && *s)
   {
-    if (*p == '<')
+    if (*s == '<')
     {
-      s = p;
-      o = onull = NULL;
-      continue;
+      in_brackets = 1;
+      mutt_buffer_clear (message_id);
+      mutt_buffer_addch (message_id, '<');
     }
-
-    if (!s)
+    else if (*s == '>')
+    {
+      if (in_brackets)
+      {
+        mutt_buffer_addch (message_id, '>');
+        s++;
+        goto success;
+      }
+      mutt_buffer_clear (message_id);
+      has_atsign = 0;
+    }
+    else if (*s == '(')
+    {
+      tmp = 0;
+      s = rfc822_parse_comment (s + 1, NULL, &tmp, 0);
       continue;
-
-    if (*p == '>')
+    }
+    else if (*s == ' ' || *s == '\t')
     {
-      size_t olen = onull - o, slen = p - s + 1;
-      ret = safe_malloc (olen + slen + 1);
-      if (o)
-	memcpy (ret, o, olen);
-      memcpy (ret + olen, s, slen);
-      ret[olen + slen] = '\0';
-      if (saveptr)
-	*saveptr = p + 1; /* next call starts after '>' */
-      return ret;
+      if (!in_brackets && mutt_buffer_len (message_id))
+      {
+        if (has_atsign)
+          break;
+        mutt_buffer_clear (message_id);
+      }
     }
-
-    /* some idiotic clients break their message-ids between lines */
-    if (s == p)
-      /* step past another whitespace */
-      s = p + 1;
-    else if (o)
-      /* more than two lines, give up */
-      s = o = onull = NULL;
     else
     {
-      /* remember the first line, start looking for the second */
-      o = s;
-      onull = p;
-      s = p + 1;
+      if (!in_brackets && !mutt_buffer_len (message_id))
+        mutt_buffer_addch (message_id, '<');
+      if (*s == '@')
+        has_atsign = 1;
+      mutt_buffer_addch (message_id, *s);
     }
+
+    s++;
   }
 
-  return NULL;
+  /* be a little stricter for ids outside of brackets.
+   * at least insist they have an '@' in them */
+  if (!in_brackets && has_atsign && mutt_buffer_len (message_id))
+    mutt_buffer_addch (message_id, '>');
+  else
+    mutt_buffer_clear (message_id);
+
+success:
+  if (saveptr)
+    *saveptr = s;
+
+  retval = safe_strdup (mutt_b2s (message_id));
+  mutt_buffer_pool_release (&message_id);
+
+  return retval;
 }
 
 void mutt_parse_mime_message (CONTEXT *ctx, HEADER *cur)
diff --git a/rfc822.c b/rfc822.c
index 01483ea4..6b4018e1 100644
--- a/rfc822.c
+++ b/rfc822.c
@@ -143,9 +143,9 @@ void rfc822_free_address (ADDRESS **p)
   }
 }
 
-static const char *
-parse_comment (const char *s,
-	       char *comment, size_t *commentlen, size_t commentmax)
+const char *
+rfc822_parse_comment (const char *s,
+                      char *comment, size_t *commentlen, size_t commentmax)
 {
   int level = 1;
 
@@ -229,7 +229,7 @@ static const char *
 next_token (const char *s, char *token, size_t *tokenlen, size_t tokenmax)
 {
   if (*s == '(')
-    return (parse_comment (s + 1, token, tokenlen, tokenmax));
+    return (rfc822_parse_comment (s + 1, token, tokenlen, tokenmax));
   if (*s == '"')
     return (parse_quote (s + 1, token, tokenlen, tokenmax));
   if (*s && is_special (*s))
diff --git a/rfc822.h b/rfc822.h
index 298d9b2e..389e6d0d 100644
--- a/rfc822.h
+++ b/rfc822.h
@@ -62,6 +62,9 @@ void rfc822_cat (char *, size_t, const char *, const char *);
 int rfc822_valid_msgid (const char *msgid);
 int rfc822_remove_from_adrlist (ADDRESS **a, const char *mailbox);
 
+const char *rfc822_parse_comment (const char *, char *, size_t *, size_t);
+
+
 extern int RFC822Error;
 extern const char * const RFC822Errors[];
 
-- 
2.26.2

